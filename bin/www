#!/usr/bin/env node

// jshint esversion:9

"use strict";

/**
 * Module dependencies.
 */

const app = require("../app");
const debug = require("debug")("restechs-opms:server");
const http = require("http");


/**
 *  Require models
 */

const sequelize = require("../config/config.db");
const Drug = require("../models/drugs");
const Inventory = require("../models/inventory");
const Supplier = require("../models/suppliers");
const Order = require("../models/orders");
const Supply = require("../models/supplies");
const Patient = require("../models/patients");
const Sale = require("../models/sales");
const User = require("../models/users");

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || "4040");
app.set("port", port);

const server = http.createServer(app);

/**
 * Define relationships between models
 */

// relationship between a drug and its inventory
Drug.hasOne(Inventory, { constraints: true, onDelete: "CASCADE" });
Inventory.belongsTo(Drug, { constraints: true, onDelete: "CASCADE" });

// relationship between a drug and its orders
Drug.hasMany(Order, { constraints: true, onDelete: "CASCADE" });
Order.belongsTo(Drug, { constraints: true, onDelete: "CASCADE" });

// relationships between a supplier and its supplies
Supplier.hasMany(Order, { constraints: true, onDelete: "CASCADE" });
Order.belongsTo(Supplier, { constraints: true, onDelete: "CASCADE" });

// relationships between an order and its supplies
Order.hasMany(Supply, { constraints: true, onDelete: "CASCADE" });
Supply.belongsTo(Order, { constraints: true, onDelete: "CASCADE" });

// relationships between a patient and sales
Patient.hasMany(Sale, { constraints: true, onDelete: "CASCADE" });
Sale.belongsTo(Patient, { constraints: true, onDelete: "CASCADE" });

// relationships between a drug its sales
Drug.hasMany(Sale, { constraints: true, onDelete: "CASCADE" });
Sale.belongsTo(Drug, { constraints: true, onDelete: "CASCADE" });

/**
 * Define users' relationships with models
 */

// relationships between the user and an order
User.hasMany(Order, { constraints: true, onDelete: "CASCADE" });
Order.belongsTo(User, { constraints: true, onDelete: "CASCADE" });

// relationships between the user sale
User.hasMany(Sale, { constraints: true, onDelete: "CASCADE" });
Sale.belongsTo(User, { constraints: true, onDelete: "CASCADE" });

// relationships between the user supply
User.hasMany(Supply, { constraints: true, onDelete: "CASCADE" });
Supply.belongsTo(User, { constraints: true, onDelete: "CASCADE" });

// relationships between the user and a supplier
User.hasMany(Supplier, { constraints: true, onDelete: "CASCADE" });
Supplier.belongsTo(User, { constraints: true, onDelete: "CASCADE" });

// relationships between the user and a patient
User.hasMany(Patient, { constraints: true, onDelete: "CASCADE" });
Patient.belongsTo(User, { constraints: true, onDelete: "CASCADE" });

// relationships between the user and inventory
User.hasMany(Inventory, { constraints: true, onDelete: "CASCADE" });
Inventory.belongsTo(User, { constraints: true, onDelete: "CASCADE" });

// relationships between the user and a drug
User.hasMany(Drug, { constraints: true, onDelete: "CASCADE" });
Drug.belongsTo(User, { constraints: true, onDelete: "CASCADE" });


/**
 * Sync database and start server.
 */

sequelize
  .sync()
  // .sync({ alter: true })
  // .sync({ force: true })
  .then(() => {

    server.listen(port);
    server.on("error", onError);
    server.on("listening", onListening);

  });


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  const bind = typeof port === "string" ? "Pipe " + port
    : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  const addr = server.address();
  const bind = typeof addr === "string" ? "pipe " + addr
    : "port " + addr.port;
  debug("Listening on " + bind);
}
